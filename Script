-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- FOV settings
local fovSizes = {80, 120, 180}
local fovIndex = 1
local currentFov = fovSizes[fovIndex]

-- Drawing FOV
local fovCircle = Drawing.new("Circle")
fovCircle.Color = Color3.fromRGB(160, 32, 240)
fovCircle.Thickness = 2
fovCircle.Transparency = 0.5
fovCircle.Filled = false
fovCircle.Radius = currentFov
fovCircle.Visible = true

-- FOV Text
local fovText = Drawing.new("Text")
fovText.Position = Vector2.new(10, Camera.ViewportSize.Y - 40)
fovText.Size = 24
fovText.Center = false
fovText.Outline = true
fovText.Color = Color3.fromRGB(255, 255, 255)
fovText.Text = "FOV: " .. currentFov .. " ðŸŽ¯"
fovText.Visible = true

-- GUI Setup
local gui = Instance.new("ScreenGui", game.CoreGui)
gui.Name = "AimbotESPUI"
gui.ResetOnSpawn = false

local background = Instance.new("Frame")
background.Size = UDim2.new(0, 220, 0, 260)
background.Position = UDim2.new(0.5, -110, 0.5, -130)
background.BackgroundColor3 = Color3.fromRGB(0, 50, 50)
background.BackgroundTransparency = 0.3
background.BorderSizePixel = 0
background.Parent = gui
background.Active = true

local dragging, dragInput, dragStart, startPos
background.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = background.Position
	end
end)

background.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = false
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
		local delta = input.Position - dragStart
		background.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)

local function createButton(text, yOffset)
	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(0, 200, 0, 40)
	btn.Position = UDim2.new(0, 10, 0, yOffset)
	btn.BackgroundColor3 = Color3.fromRGB(20, 20, 80)
	btn.TextColor3 = Color3.new(1,1,1)
	btn.TextSize = 18
	btn.Font = Enum.Font.SourceSansBold
	btn.Text = text
	btn.Parent = background
	btn.AutoButtonColor = true
	btn.BorderSizePixel = 0
	btn.ClipsDescendants = true

	local uicorner = Instance.new("UICorner", btn)
	uicorner.CornerRadius = UDim.new(0, 6)

	return btn
end

-- GUI Logic States
local espEnabled = true
local aimbotEnabled = true
local healthTextEnabled = true
local nameTextEnabled = true
local espColor = Color3.fromRGB(255, 0, 0)

local espBtn = createButton("Toggle ESP (ON)", 10)
local aimbotBtn = createButton("Toggle Aimbot (ON)", 60)
local healthBtn = createButton("Toggle Health Text (ON)", 110)
local nameBtn = createButton("Toggle Name Text (ON)", 160)
local colorBtn = createButton("Change ESP Color", 210)

-- Button toggles
espBtn.MouseButton1Click:Connect(function()
	espEnabled = not espEnabled
	espBtn.Text = espEnabled and "Toggle ESP (ON)" or "Toggle ESP (OFF)"
end)

aimbotBtn.MouseButton1Click:Connect(function()
	aimbotEnabled = not aimbotEnabled
	aimbotBtn.Text = aimbotEnabled and "Toggle Aimbot (ON)" or "Toggle Aimbot (OFF)"
end)

healthBtn.MouseButton1Click:Connect(function()
	healthTextEnabled = not healthTextEnabled
	healthBtn.Text = healthTextEnabled and "Toggle Health Text (ON)" or "Toggle Health Text (OFF)"
end)

nameBtn.MouseButton1Click:Connect(function()
	nameTextEnabled = not nameTextEnabled
	nameBtn.Text = nameTextEnabled and "Toggle Name Text (ON)" or "Toggle Name Text (OFF)"
end)

colorBtn.MouseButton1Click:Connect(function()
	espColor = Color3.fromRGB(math.random(0,255), math.random(0,255), math.random(0,255))
	for _, v in pairs(highlights) do
		v.FillColor = espColor
	end
end)

-- Cham Logic
local highlights = {}

function createCham(player)
	if player.Character and not highlights[player] then
		local h = Instance.new("Highlight")
		h.Adornee = player.Character
		h.FillColor = espColor
		h.OutlineColor = Color3.fromRGB(0,0,0)
		h.FillTransparency = 0.4
		h.OutlineTransparency = 0
		h.Parent = game.CoreGui
		highlights[player] = h
	end
end

function removeCham(player)
	if highlights[player] then
		highlights[player]:Destroy()
		highlights[player] = nil
	end
end

-- Text drawing
local healthText = {}
local nameText = {}

function updateHealth(player)
	if not healthTextEnabled then
		if healthText[player] then healthText[player]:Remove() healthText[player] = nil end
		return
	end

	if not player.Character or not player.Character:FindFirstChild("Humanoid") or not player.Character:FindFirstChild("Head") then
		if healthText[player] then healthText[player]:Remove() healthText[player] = nil end
		return
	end

	local head = player.Character.Head
	local humanoid = player.Character.Humanoid
	local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position + Vector3.new(0, 2.5, 0))

	if not healthText[player] then
		local bar = Drawing.new("Line")
		bar.Thickness = 2
		bar.Color = Color3.fromRGB(0, 255, 0)
		bar.Visible = true
		healthText[player] = bar
	end

	local bar = healthText[player]
	if onScreen and humanoid.Health > 0 then
		local hpRatio = humanoid.Health / humanoid.MaxHealth
		local height = 50
		local fullY = screenPos.Y - height / 2
		bar.From = Vector2.new(screenPos.X - 40, fullY + height)
		bar.To = Vector2.new(screenPos.X - 40, fullY + height * (1 - hpRatio))
		bar.Visible = true
	else
		bar.Visible = false
	end
end

function updateName(player)
	if not nameTextEnabled then
		if nameText[player] then nameText[player]:Remove() nameText[player] = nil end
		return
	end

	if not player.Character or not player.Character:FindFirstChild("Head") then
		if nameText[player] then nameText[player]:Remove() nameText[player] = nil end
		return
	end

	local head = player.Character.Head
	local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position + Vector3.new(0, 3.5, 0))

	if not nameText[player] then
		local label = Drawing.new("Text")
		label.Size = 14
		label.Outline = true
		label.Center = true
		label.Color = Color3.fromRGB(255, 255, 255)
		label.Visible = true
		nameText[player] = label
	end

	local label = nameText[player]
	if onScreen then
		label.Position = Vector2.new(screenPos.X, screenPos.Y)
		label.Text = player.Name
		label.Visible = true
	else
		label.Visible = false
	end
end

-- Aimbot
local aiming = false
UserInputService.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton2 and aimbotEnabled then
		aiming = true
	end
	if input.KeyCode == Enum.KeyCode.LeftAlt then
		fovIndex = (fovIndex % #fovSizes) + 1
		currentFov = fovSizes[fovIndex]
		fovCircle.Radius = currentFov
		fovText.Text = "FOV: " .. currentFov .. " ðŸŽ¯"
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton2 then
		aiming = false
	end
end)

function getClosestHead()
	local closest, dist = nil, math.huge
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
			local head = player.Character.Head
			local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
			if onScreen then
				local mouse = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
				local d = (Vector2.new(screenPos.X, screenPos.Y) - mouse).Magnitude
				if d < currentFov and d < dist then
					closest, dist = head, d
				end
			end
		end
	end
	return closest
end

RunService.RenderStepped:Connect(function()
	-- Update FOV drawing
	fovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
	fovCircle.Visible = aimbotEnabled
	fovText.Visible = aimbotEnabled

	-- ESP + name/health
	for _, player in ipairs(Players:GetPlayers()) do
		if player ~= LocalPlayer then
			if espEnabled then createCham(player) else removeCham(player) end
			updateHealth(player)
			updateName(player)
		end
	end

	-- Aimbot logic
	if aiming then
		local target = getClosestHead()
		if target then
			Camera.CFrame = CFrame.new(Camera.CFrame.Position, target.Position)
		end
	end
end)

-- GUI toggle
UserInputService.InputBegan:Connect(function(input)
	if input.KeyCode == Enum.KeyCode.Insert then
		gui.Enabled = not gui.Enabled
	end
end)

-- Player left cleanup
Players.PlayerRemoving:Connect(function(player)
	removeCham(player)
	if healthText[player] then healthText[player]:Remove() healthText[player] = nil end
	if nameText[player] then nameText[player]:Remove() nameText[player] = nil end
end)
